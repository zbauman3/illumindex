export const ascii8By12 = [
  0x00000000, 0x00000000, 0x00000000, //
  0x00307878, 0x78303000, 0x30300000, // !
  0x00666666, 0x24000000, 0x00000000, // "
  0x006C6CFE, 0x6C6C6CFE, 0x6C6C0000, // #
  0x30307CC0, 0xC0780C0C, 0xF8303000, // $
  0x000000C4, 0xCC183060, 0xCC8C0000, // %
  0x0070D8D8, 0x70FADECC, 0xDC760000, // &
  0x00303030, 0x60000000, 0x00000000, // '
  0x000C1830, 0x60606030, 0x180C0000, // (
  0x00603018, 0x0C0C0C18, 0x30600000, // )
  0x00000066, 0x3CFF3C66, 0x00000000, // *
  0x00000018, 0x187E1818, 0x00000000, // +
  0x00000000, 0x00000000, 0x38386000, // ,
  0x00000000, 0x00FE0000, 0x00000000, // -
  0x00000000, 0x00000000, 0x38380000, // .
  0x00000206, 0x0C183060, 0xC0800000, // /
  0x007CC6D6, 0xD6D6D6D6, 0xC67C0000, // 0
  0x00183878, 0x18181818, 0x18180000, // 1
  0x0078CCCC, 0x0C183060, 0xCCFC0000, // 2
  0x0078CC0C, 0x0C380C0C, 0xCC780000, // 3
  0x000C1C3C, 0x6CCCFE0C, 0x0C0C0000, // 4
  0x00FCC0C0, 0xC0F80C0C, 0xCC780000, // 5
  0x003860C0, 0xC0F8CCCC, 0xCC780000, // 6
  0x00FEC6C6, 0x060C1830, 0x30300000, // 7
  0x0078CCCC, 0xEC78DCCC, 0xCC780000, // 8
  0x0078CCCC, 0xCC7C1818, 0x30700000, // 9
  0x00000038, 0x38000038, 0x38000000, // :
  0x00000038, 0x38000038, 0x38183000, // ;
  0x000C1830, 0x60C06030, 0x180C0000, // <
  0x00000000, 0x7E007E00, 0x00000000, // =
  0x00603018, 0x0C060C18, 0x30600000, // >
  0x0078CC0C, 0x18303000, 0x30300000, // ?
  0x007CC6C6, 0xDEDEDEC0, 0xC07C0000, // @
  0x003078CC, 0xCCCCFCCC, 0xCCCC0000, // A
  0x00FCC6C6, 0xC6FCC6C6, 0xC6FC0000, // B
  0x003C66C6, 0xC0C0C0C6, 0x663C0000, // C
  0x00F8CCC6, 0xC6C6C6C6, 0xCCF80000, // D
  0x00FEFEC0, 0xC0FCC0C0, 0xFEFE0000, // E
  0x00FEFEC0, 0xC0FCFCC0, 0xC0C00000, // F
  0x003C66C6, 0xC0C0CEC6, 0x663E0000, // G
  0x00CCCCCC, 0xCCFCCCCC, 0xCCCC0000, // H
  0x00783030, 0x30303030, 0x30780000, // I
  0x001E0C0C, 0x0C0CCCCC, 0xCC780000, // J
  0x00C6C6DC, 0xFCF0FCDC, 0xC6C60000, // K
  0x00C0C0C0, 0xC0C0C0C6, 0xFEFE0000, // L
  0x00C6EEFE, 0xFED6C6C6, 0xC6C60000, // M
  0x00C6C6E6, 0xF6FEDECE, 0xC6C60000, // N
  0x00386CC6, 0xC6C6C6C6, 0x6C380000, // O
  0x00FCC6C6, 0xC6FCF8C0, 0xC0C00000, // P
  0x00386CC6, 0xC6C6CEDE, 0x7C0C0C00, // Q
  0x00FCC6C6, 0xC6FCCCC6, 0xC6C60000, // R
  0x0078CCCC, 0xC07018CC, 0xCC780000, // S
  0x00FCFC30, 0x30303030, 0x30300000, // T
  0x00CCCCCC, 0xCCCCCCCC, 0xCC780000, // U
  0x00CCCCCC, 0xCCCCCCCC, 0x78300000, // V
  0x00C6C6C6, 0xC6D6D66C, 0x6C6C0000, // W
  0x00CCCCCC, 0x783078CC, 0xCCCC0000, // X
  0x00CCCCCC, 0xCC783030, 0x30300000, // Y
  0x00FECE98, 0x18306062, 0xC6FE0000, // Z
  0x003C3030, 0x30303030, 0x303C0000, // [
  0x000080C0, 0x6030180C, 0x06020000, // backslash
  0x003C0C0C, 0x0C0C0C0C, 0x0C3C0000, // ]
  0x10386CC6, 0x00000000, 0x00000000, // ^
  0x00000000, 0x00000000, 0x0000FF00, // _
  0x30301800, 0x00000000, 0x00000000, // `
  0x00000000, 0x780C7CCC, 0xCC760000, // a
  0x00C0C0C0, 0xFCC6C6C6, 0xC6FC0000, // b
  0x00000000, 0x78CCC0C0, 0xCC780000, // c
  0x00060606, 0x7EC6C6C6, 0xC67E0000, // d
  0x00000000, 0x7CC6FCC0, 0xC67C0000, // e
  0x003C6E66, 0x60F8F860, 0x60600000, // f
  0x00000000, 0x7EC6C6C6, 0x7E06C678, // g
  0x00C0C0C0, 0xDCF6E6C6, 0xC6C60000, // h
  0x00181800, 0x18181818, 0x18180000, // i
  0x000C0C00, 0x0C0C0C0C, 0x0CCCCC78, // j
  0x00C0C0C0, 0xC6DCF8EC, 0xC6C60000, // k
  0x00181818, 0x18181818, 0x181C0000, // l
  0x00000000, 0xFCD6D6D6, 0xD6C60000, // m
  0x00000000, 0xF8CCCCCC, 0xCCCC0000, // n
  0x00000000, 0x78CCCCCC, 0xCC780000, // o
  0x00000000, 0xFCC6C6C6, 0xC6FCC0C0, // p
  0x00000000, 0x7EC6C6C6, 0xC67E0606, // q
  0x00000000, 0xDCFEE6C0, 0xC0C00000, // r
  0x00000000, 0x78CC6018, 0xCC780000, // s
  0x00006060, 0xFC606060, 0x6C380000, // t
  0x00000000, 0xCCCCCCCC, 0xCC760000, // u
  0x00000000, 0xCCCCCCCC, 0x78300000, // v
  0x00000000, 0xC6C6D6D6, 0x6C6C0000, // w
  0x00000000, 0xC66C3838, 0x6CC60000, // x
  0x00000000, 0x66666666, 0x3C0C18F0, // y
  0x00000000, 0xFC8C1860, 0xC4FC0000, // z
  0x001C3030, 0x60C06030, 0x301C0000, // {
  0x00181818, 0x18001818, 0x18180000, // |
  0x00E03030, 0x180C1830, 0x30E00000, // }
  0x0073DACE, 0x00000000, 0x00000000, // ~
];

export const ascii6By8 = [
  0x0000, 0x0000, 0x0000, // Space
  0x10E3, 0x8410, 0x0100, // !
  0x6DB4, 0x8000, 0x0000, // "
  0x00A7, 0xCA29, 0xF280, // #
  0x20E4, 0x0C09, 0xC100, // $
  0x6590, 0x8421, 0x34C0, // %
  0x2145, 0x0855, 0x2340, // &
  0x30C2, 0x0000, 0x0000, // '
  0x1082, 0x0820, 0x8100, // (
  0x2041, 0x0410, 0x4200, // )
  0x00A3, 0x9F38, 0xA000, // *
  0x0041, 0x1F10, 0x4000, // +
  0x0000, 0x0000, 0xC308, // ,
  0x0000, 0x1F00, 0x0000, // -
  0x0000, 0x0000, 0xC300, // .
  0x0010, 0x8421, 0x0000, // /
  0x3914, 0xD565, 0x1380, // 0
  0x10C1, 0x0410, 0x4380, // 1
  0x3910, 0x4621, 0x07C0, // 2
  0x3910, 0x4E05, 0x1380, // 3
  0x0862, 0x927C, 0x2080, // 4
  0x7D04, 0x1E05, 0x1380, // 5
  0x1884, 0x1E45, 0x1380, // 6
  0x7C10, 0x8420, 0x8200, // 7
  0x3914, 0x4E45, 0x1380, // 8
  0x3914, 0x4F04, 0x2300, // 9
  0x0003, 0x0C00, 0xC300, // :
  0x0003, 0x0C00, 0xC308, // ;
  0x0842, 0x1020, 0x4080, // <
  0x0007, 0xC001, 0xF000, // =
  0x2040, 0x8108, 0x4200, // >
  0x3910, 0x4610, 0x0100, // ?
  0x3915, 0xD55D, 0x0380, // @
  0x3914, 0x517D, 0x1440, // A
  0x7914, 0x5E45, 0x1780, // B
  0x3914, 0x1041, 0x1380, // C
  0x7914, 0x5145, 0x1780, // D
  0x7D04, 0x1E41, 0x07C0, // E
  0x7D04, 0x1E41, 0x0400, // F
  0x3914, 0x1745, 0x13C0, // G
  0x4514, 0x5F45, 0x1440, // H
  0x3841, 0x0410, 0x4380, // I
  0x0410, 0x4145, 0x1380, // J
  0x4525, 0x1851, 0x2440, // K
  0x4104, 0x1041, 0x07C0, // L
  0x45B5, 0x5145, 0x1440, // M
  0x4595, 0x5345, 0x1440, // N
  0x3914, 0x5145, 0x1380, // O
  0x7914, 0x5E41, 0x0400, // P
  0x3914, 0x5155, 0x2340, // Q
  0x7914, 0x5E49, 0x1440, // R
  0x3914, 0x0E05, 0x1380, // S
  0x7C41, 0x0410, 0x4100, // T
  0x4514, 0x5145, 0x1380, // U
  0x4514, 0x5144, 0xA100, // V
  0x4515, 0x5555, 0x5280, // W
  0x4512, 0x8429, 0x1440, // X
  0x4514, 0x4A10, 0x4100, // Y
  0x7821, 0x0841, 0x0780, // Z
  0x3882, 0x0820, 0x8380, // [
  0x0102, 0x0408, 0x1000, // Back Slash
  0x3820, 0x8208, 0x2380, // ]
  0x10A4, 0x4000, 0x0000, // ^
  0x0000, 0x0000, 0x003F, // _
  0x30C1, 0x0000, 0x0000, // `
  0x0003, 0x813D, 0x13C0, // a
  0x4107, 0x9145, 0x1780, // b
  0x0003, 0x9141, 0x1380, // c
  0x0413, 0xD145, 0x13C0, // d
  0x0003, 0x9179, 0x0380, // e
  0x1882, 0x1E20, 0x8200, // f
  0x0003, 0xD144, 0xF04E, // g
  0x4107, 0x1249, 0x2480, // h
  0x1001, 0x0410, 0x4180, // i
  0x0801, 0x8208, 0x248C, // j
  0x4104, 0x9461, 0x4480, // k
  0x1041, 0x0410, 0x4180, // l
  0x0006, 0x9555, 0x1440, // m
  0x0007, 0x1249, 0x2480, // n
  0x0003, 0x9145, 0x1380, // o
  0x0007, 0x9145, 0x1790, // p
  0x0003, 0xD145, 0x13C1, // q
  0x0005, 0x8920, 0x8700, // r
  0x0003, 0x9038, 0x1380, // s
  0x0087, 0x8820, 0xA100, // t
  0x0004, 0x9249, 0x6280, // u
  0x0004, 0x5144, 0xA100, // v
  0x0004, 0x5155, 0xF280, // w
  0x0004, 0x9231, 0x2480, // x
  0x0004, 0x9248, 0xE118, // y
  0x0007, 0x8231, 0x0780, // z
  0x1882, 0x1820, 0x8180, // {
  0x1041, 0x0010, 0x4100, // |
  0x3020, 0x8308, 0x2300, // }
  0x2940, 0x0000, 0x0000, // ~
];

export const ascii4By6 = [
  0x00, 0x00, 0x00, // Space
  0x66, 0x60, 0x60, // !
  0x55, 0x00, 0x00, // "
  0xAF, 0xAF, 0xA0, // #
  0x27, 0x63, 0x72, // $
  0x93, 0x6C, 0x90, // %
  0x25, 0x35, 0x70, // &
  0x64, 0x00, 0x00, // '
  0x24, 0x44, 0x20, // (
  0x42, 0x22, 0x40, // )
  0x52, 0x72, 0x50, // *
  0x02, 0x72, 0x00, // +
  0x00, 0x00, 0x64, // ,
  0x00, 0x70, 0x00, // -
  0x00, 0x00, 0x20, // .
  0x13, 0x6C, 0x80, // /
  0x69, 0xBD, 0x60, // 0
  0x6A, 0x22, 0xF0, // 1
  0x69, 0x24, 0xF0, // 2
  0xE1, 0x61, 0xE0, // 3
  0x99, 0xF1, 0x10, // 4
  0xF8, 0xF1, 0xE0, // 5
  0xF8, 0xF9, 0xE0, // 6
  0xF1, 0x24, 0x80, // 7
  0xF9, 0xF9, 0x60, // 8
  0xF9, 0xF1, 0xE0, // 9
  0x00, 0x20, 0x20, // :
  0x00, 0x20, 0x64, // ;
  0x12, 0x42, 0x10, // <
  0x00, 0x70, 0x70, // =
  0x42, 0x12, 0x40, // >
  0x61, 0x20, 0x20, // ?
  0x75, 0x54, 0x70, // @
  0x69, 0xF9, 0x90, // A
  0xE9, 0xE9, 0xE0, // B
  0x78, 0x88, 0x70, // C
  0xE9, 0x99, 0xE0, // D
  0xF8, 0xE8, 0xF0, // E
  0xF8, 0xE8, 0x80, // F
  0x78, 0xB9, 0xE0, // G
  0x99, 0xF9, 0x90, // H
  0xF6, 0x66, 0xF0, // I
  0xF2, 0x2A, 0x40, // J
  0x9A, 0xCA, 0x90, // K
  0xCC, 0xCC, 0xF0, // L
  0x6F, 0xF9, 0x90, // M
  0x9D, 0xB9, 0x90, // N
  0x69, 0x99, 0x60, // O
  0xE9, 0xE8, 0x80, // P
  0x69, 0x9B, 0x70, // Q
  0xE9, 0xEA, 0x90, // R
  0x78, 0xF1, 0xE0, // S
  0xF6, 0x66, 0x60, // T
  0x99, 0x99, 0xF0, // U
  0x99, 0x99, 0x60, // V
  0x99, 0xFF, 0x60, // W
  0x9F, 0x6F, 0x90, // X
  0x9F, 0x62, 0x20, // Y
  0xF3, 0x6C, 0xF0, // Z
  0x64, 0x44, 0x60, // [
  0x8C, 0x63, 0x10, // Back Slash
  0x62, 0x22, 0x60, // ]
  0x25, 0x00, 0x00, // ^
  0x00, 0x00, 0x0F, // _
  0x62, 0x00, 0x00, // `
  0x61, 0xF9, 0x70, // a
  0x88, 0xF9, 0xE0, // b
  0x0F, 0x88, 0x70, // c
  0x11, 0xF9, 0x70, // d
  0x07, 0xF8, 0x70, // e
  0x69, 0xC8, 0x80, // f
  0x0F, 0x97, 0x16, // g
  0x88, 0xE9, 0x90, // h
  0x60, 0x62, 0x20, // i
  0x30, 0x31, 0x96, // j
  0x8A, 0xCA, 0x90, // k
  0x04, 0x44, 0x60, // l
  0x06, 0xF9, 0x90, // m
  0x09, 0xDB, 0x90, // n
  0x0F, 0x99, 0x60, // o
  0x0F, 0x9E, 0x88, // p
  0x0F, 0x97, 0x11, // q
  0x0F, 0x98, 0x80, // r
  0x07, 0x42, 0xE0, // s
  0x44, 0xF4, 0x70, // t
  0x09, 0x99, 0xF0, // u
  0x09, 0x99, 0x60, // v
  0x09, 0x9F, 0x60, // w
  0x09, 0x66, 0x90, // x
  0x09, 0x9F, 0x16, // y
  0x0F, 0x24, 0xF0, // z
  0x32, 0x62, 0x30, // {
  0x22, 0x22, 0x20, // |
  0x62, 0x32, 0x60, // }
  0x5A, 0x00, 0x00, // ~
];

export const FONT_ASCII_MIN = 32;
export const FONT_ASCII_MAX = 126;

export const FontSize = {
  fontSizeSm: 'sm',
  fontSizeMd: 'md',
  fontSizeLg: 'lg',
} as const;
export type FontSize = typeof FontSize[keyof typeof FontSize];

export type FontSizeDetails = {
  width: number,
  height: number,
  bitsPerChunk: number,
  chunksPerChar: number,
  spacing: number,
  name: FontSize
}

export const fontSizeDetailsMap: Record<FontSize, FontSizeDetails> = {
  [FontSize.fontSizeSm]: {
    width: 4,
    height: 6,
    bitsPerChunk: 8,
    chunksPerChar: 3,
    spacing: 1,
    name: FontSize.fontSizeSm,
  },
  [FontSize.fontSizeLg]: {
    width: 8,
    height: 12,
    bitsPerChunk: 32,
    chunksPerChar: 3,
    spacing: 0,
    name: FontSize.fontSizeLg,
  },
  [FontSize.fontSizeMd]: {
    width: 6,
    height: 8,
    bitsPerChunk: 16,
    chunksPerChar: 3,
    spacing: 0,
    name: FontSize.fontSizeMd,
  },
} as const;

export const fontAsciiToIndex = (ascii: number) => (ascii - FONT_ASCII_MIN)
export const fontIsValidAscii = (ascii: number) => (ascii <= FONT_ASCII_MAX && ascii >= FONT_ASCII_MIN)
export const fontIsValidChunk = (font: FontSizeDetails, chunk: number) => (chunk <= font.chunksPerChar)
export const fontGetChunk = (size: FontSize, font: FontSizeDetails, asciiChar: number, chunk: number): number => {
  if (!fontIsValidChunk(font, chunk) || !fontIsValidAscii(asciiChar)) {
    return 0;
  }

  switch (size) {
    case FontSize.fontSizeSm:
      return ascii4By6[(fontAsciiToIndex(asciiChar) * font.chunksPerChar) + chunk];
    case FontSize.fontSizeLg:
      return ascii8By12[(fontAsciiToIndex(asciiChar) * font.chunksPerChar) + chunk];
    case FontSize.fontSizeMd:
    default:
      return ascii6By8[(fontAsciiToIndex(asciiChar) * font.chunksPerChar) + chunk];
  }
}
